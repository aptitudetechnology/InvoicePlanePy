{% extends "base.html" %}
{% block content %}
<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>Edit Invoice</h2>
            <a href="/invoices" class="btn btn-secondary">
                <i class="bi bi-arrow-left"></i> Back to Invoices
            </a>
        </div>
        <div class="card">
            <div class="card-body">
                {# Form action points to an update endpoint, typically including the invoice ID #}
                <form method="post" action="/invoices/update/{{ quote.id }}"> {# 'quote' here probably means 'invoice' object #}
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <h5>Client Information:</h5>
                            <div class="mb-3">
                                <label for="client_id" class="form-label">Client</label>
                                <select class="form-select" id="client_id" name="client_id" required>
                                    <option value="">Select a client</option>
                                    {# Assuming 'clients' is passed from the backend context #}
                                    {% for client in clients %}
                                        <option value="{{ client.id }}"
                                                data-name="{{ client.name }}"
                                                data-address="{{ client.address }}"
                                                data-email="{{ client.email }}"
                                                {% if quote.client_id == client.id %}selected{% endif %}>
                                            {{ client.name }}
                                        </option>
                                    {% endfor %}
                                </select>
                            </div>
                            {# Client details will be populated via JavaScript when client is selected #}
                            <div id="client_details" class="border p-3 bg-light" style="{% if quote.client_id %}display: block;{% else %}display: none;{% endif %}">
                                <div id="client_name">{{ quote.client.name if quote.client else '' }}</div>
                                <div id="client_address">{{ quote.client.address if quote.client else '' }}</div>
                                <div id="client_email">{{ quote.client.email if quote.client else '' }}</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h5>Invoice Details</h5>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="invoice_number" class="form-label">Invoice #</label>
                                    <input type="text" class="form-control" id="invoice_number" name="invoice_number" value="{{ quote.invoice_number if quote.invoice_number else '' }}" placeholder="Not set yet">
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="status" class="form-label">Status <small class="text-muted">(Can be changed)</small></label>
                                    <select class="form-select" id="status" name="status">
                                        <option value="draft" {% if quote.status == 'draft' %}selected{% endif %}>Draft</option>
                                        <option value="sent" {% if quote.status == 'sent' %}selected{% endif %}>Sent</option>
                                        <option value="viewed" {% if quote.status == 'viewed' %}selected{% endif %}>Viewed</option>
                                        <option value="paid" {% if quote.status == 'paid' %}selected{% endif %}>Paid</option>
                                    </select>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="invoice_date" class="form-label">Date</label>
                                    <input type="date" class="form-control" id="invoice_date" name="invoice_date" value="{{ quote.invoice_date.strftime('%Y-%m-%d') if quote.invoice_date else '' }}" required>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="due_date" class="form-label">Due Date</label>
                                    <input type="date" class="form-control" id="due_date" name="due_date" value="{{ quote.due_date.strftime('%Y-%m-%d') if quote.due_date else '' }}">
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="payment_method" class="form-label">Payment Method</label>
                                    <select class="form-select" id="payment_method" name="payment_method">
                                        <option value="">Select the Payment Method</option>
                                        <option value="cash" {% if quote.payment_method == 'cash' %}selected{% endif %}>Cash</option>
                                        <option value="check" {% if quote.payment_method == 'check' %}selected{% endif %}>Check</option>
                                        <option value="credit_card" {% if quote.payment_method == 'credit_card' %}selected{% endif %}>Credit Card</option>
                                        <option value="bank_transfer" {% if quote.payment_method == 'bank_transfer' %}selected{% endif %}>Bank Transfer</option>
                                        <option value="paypal" {% if quote.payment_method == 'paypal' %}selected{% endif %}>PayPal</option>
                                        <option value="other" {% if quote.payment_method == 'other' %}selected{% endif %}>Other</option>
                                    </select>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="pdf_password" class="form-label">PDF password (optional)</label>
                                    <input type="password" class="form-control" id="pdf_password" name="pdf_password" value="{{ quote.pdf_password if quote.pdf_password else '' }}">
                                    <small class="form-text text-muted">not-implemented yet</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-4">
                        <h5>Items</h5>
                        <div id="items_container" class="table-responsive">
                            <table class="table table-bordered" id="items_table">
                                <thead>
                                    <tr>
                                        <th>Item</th>
                                        <th>Quantity</th>
                                        <th>Price</th>
                                        <th>Item Discount</th>
                                        <th>Tax Rate</th>
                                        <th>Total</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {# Loop through existing items if available, otherwise display one empty row #}
    {% if quote.items %}
        {% for item in quote.items %}
        <tr>
            <td>
                <input type="hidden" name="item_id_{{ loop.index0 }}" value="{{ item.id }}">
                <input type="text" class="form-control item-name" name="item_name_{{ loop.index0 }}" value="{{ item.name }}" placeholder="Item name" required onchange="calculateItemTotal(this)">
                <textarea class="form-control mt-2 item-description" name="item_description_{{ loop.index0 }}" rows="2" placeholder="Description">{{ item.description }}</textarea>
            </td>
            <td>
                <input type="number" class="form-control item-quantity" name="item_quantity_{{ loop.index0 }}" min="1" step="0.01" value="{{ item.quantity }}" required onchange="calculateItemTotal(this)">
                <select class="form-select mt-2 item-unit" name="item_unit_{{ loop.index0 }}">
                    <option value="none" {% if item.unit == 'none' %}selected{% endif %}>None</option>
                    <option value="piece" {% if item.unit == 'piece' %}selected{% endif %}>Piece</option>
                    <option value="hour" {% if item.unit == 'hour' %}selected{% endif %}>Hour</option>
                    <option value="day" {% if item.unit == 'day' %}selected{% endif %}>Day</option>
                    <option value="month" {% if item.unit == 'month' %}selected{% endif %}>Month</option>
                </select>
            </td>
            <td>
                <input type="number" class="form-control item-price" name="item_price_{{ loop.index0 }}" min="0" step="0.01" value="{{ item.price }}" required onchange="calculateItemTotal(this)">
            </td>
            <td>
                <input type="number" class="form-control item-discount" name="item_discount_{{ loop.index0 }}" min="0" step="0.01" value="{{ item.discount if item.discount else 0 }}" onchange="calculateItemTotal(this)">
            </td>
            <td>
                <select class="form-select item-tax-rate tax-rate-select" name="item_tax_rate_{{ loop.index0 }}" onchange="calculateItemTotal(this)">
                    <option value="0">None (0%)</option>
                    </select>
                <input type="hidden" class="initial-tax-rate" value="{{ item.tax_rate if item.tax_rate is not none else 0 }}">
            </td>
            <td>
                <input type="number" class="form-control item-total" name="item_total_{{ loop.index0 }}" value="{{ item.total if item.total else 0 }}" readonly>
            </td>
            <td>
                <button type="button" class="btn btn-sm btn-danger remove-row-btn" onclick="removeRow(this)">
                    <i class="bi bi-trash"></i>
                </button>
            </td>
        </tr>
        {% endfor %}
    {% else %}
        <tr>
            <td>
                <input type="hidden" name="item_id_0" value="">
                <input type="text" class="form-control item-name" name="item_name_0" placeholder="Item name" onchange="calculateItemTotal(this)">
                <textarea class="form-control mt-2 item-description" name="item_description_0" rows="2" placeholder="Description"></textarea>
            </td>
            <td>
                <input type="number" class="form-control item-quantity" name="item_quantity_0" min="1" value="1" onchange="calculateItemTotal(this)">
                <select class="form-select mt-2 item-unit" name="item_unit_0">
                    <option value="none">None</option>
                    <option value="piece">Piece</option>
                    <option value="hour">Hour</option>
                    <option value="day">Day</option>
                    <option value="month">Month</option>
                </select>
            </td>
            <td>
                <input type="number" class="form-control item-price" name="item_price_0" min="0" step="0.01" placeholder="0.00" onchange="calculateItemTotal(this)">
            </td>
            <td>
                <input type="number" class="form-control item-discount" name="item_discount_0" min="0" step="0.01" placeholder="0.00" value="0" onchange="calculateItemTotal(this)">
            </td>
            <td>
                <select class="form-select item-tax-rate tax-rate-select" name="item_tax_rate_0" onchange="calculateItemTotal(this)">
                    <option value="0">None (0%)</option>
                    </select>
                <input type="hidden" class="initial-tax-rate" value="0">
            </td>
            <td>
                <input type="number" class="form-control item-total" name="item_total_0" value="0.00" readonly>
            </td>
            <td>
                <button type="button" class="btn btn-sm btn-danger remove-row-btn" onclick="removeRow(this)">
                    <i class="bi bi-trash"></i>
                </button>
            </td>
        </tr>
    {% endif %}
                                </tbody>
                            </table>
                        </div>
                        {# This hidden input tracks the total number of item rows for backend processing #}
                        <input type="hidden" name="items_count" id="items_count" value="{{ quote.items|length if quote.items else 1 }}">
                        <div class="mb-3">
                            <button type="button" class="btn btn-outline-primary me-2" onclick="addNewRow()">
                                <i class="bi bi-plus"></i> Add new row
                            </button>
                            <button type="button" class="btn btn-outline-secondary me-2">
                                <i class="bi bi-plus"></i> Add product
                            </button>
                            <button type="button" class="btn btn-outline-info">
                                <i class="bi bi-plus"></i> Add task
                            </button>
                        </div>
                    </div>

                    <div class="row mb-4">
                        <div class="col-md-6">
                            </div>
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-body">
                                    <div class="row mb-2">
                                        <div class="col-6"><strong>Subtotal:</strong></div>
                                        <div class="col-6 text-end" id="subtotal">${{ '%.2f'|format(quote.subtotal) if quote.subtotal is not none else '0.00' }}</div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-6"><strong>Item Tax:</strong></div>
                                        <div class="col-6 text-end" id="item_tax">${{ '%.2f'|format(quote.item_tax) if quote.item_tax is not none else '0.00' }}</div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-6"><strong>Invoice Tax:</strong></div>
                                        <div class="col-6 text-end" id="invoice_tax">${{ '%.2f'|format(quote.invoice_tax) if quote.invoice_tax is not none else '0.00' }}</div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-6">
                                            <strong>Discount:</strong>
                                            <div class="input-group input-group-sm mt-1">
                                                <input type="number" class="form-control" id="discount_percentage" name="discount_percentage" min="0" max="100" step="0.01" placeholder="0" value="{{ quote.discount_percentage if quote.discount_percentage is not none else 0 }}" onchange="calculateTotals()">
                                                <span class="input-group-text">%</span>
                                                <input type="number" class="form-control" id="discount_amount_input" name="discount_amount" min="0" step="0.01" placeholder="0.00" value="{{ quote.discount_amount if quote.discount_amount is not none else 0 }}" onchange="calculateTotals()">
                                            </div>
                                        </div>
                                        <div class="col-6 text-end" id="discount_amount">${{ '%.2f'|format(quote.discount_amount_calculated) if quote.discount_amount_calculated is not none else '0.00' }}</div>
                                    </div>
                                    <hr>
                                    <div class="row mb-2">
                                        <div class="col-6"><strong>Total:</strong></div>
                                        <div class="col-6 text-end"><strong id="total">${{ '%.2f'|format(quote.total) if quote.total is not none else '0.00' }}</strong></div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-6"><strong>Paid:</strong></div>
                                        <div class="col-6 text-end" id="paid">${{ '%.2f'|format(quote.paid) if quote.paid is not none else '0.00' }}</div>
                                    </div>
                                    <div class="row">
                                        <div class="col-6"><strong>Balance:</strong></div>
                                        <div class="col-6 text-end"><strong id="balance">${{ '%.2f'|format(quote.balance) if quote.balance is not none else '0.00' }}</strong></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="invoice_terms" class="form-label"><strong>Invoice Terms</strong></label>
                                <textarea class="form-control" id="invoice_terms" name="invoice_terms" rows="5" placeholder="Payment terms, conditions, etc.">{{ quote.terms if quote.terms else '' }}</textarea>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label"><strong>Attachments</strong></label>
                                <div class="border p-3 bg-light">
                                    <button type="button" class="btn btn-outline-primary">
                                        <i class="bi bi-plus"></i> Add Files...
                                    </button>
                                    <small class="form-text text-muted d-block mt-2">File attachments not-implemented yet</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-success">
                            <i class="bi bi-check-circle"></i> Save Changes
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    let taxRates = []; // Will be populated from database

    // Load tax rates from database
    async function loadTaxRates() {
        try {
            const response = await fetch('/tax_rates/api');
            if (!response.ok) throw new Error('Failed to load tax rates');
            const data = await response.json();
            taxRates = data.tax_rates || data;
            
            // Populate all existing tax rate dropdowns
            populateAllTaxRateDropdowns();
        } catch (error) {
            console.error('Error loading tax rates:', error);
            // Fallback to empty array if server fails
            taxRates = [];
            // Still populate dropdowns with just the "None" option
            populateAllTaxRateDropdowns();
        }
    }

    // Populate all tax rate dropdowns with current tax rates
    function populateAllTaxRateDropdowns() {
        const taxRateSelects = document.querySelectorAll('.tax-rate-select');
        taxRateSelects.forEach(select => {
            populateTaxRateDropdown(select);
        });
    }

    // Populate a single tax rate dropdown
    function populateTaxRateDropdown(selectElement) {
        // Get initial value from hidden input if it exists
        const initialValueInput = selectElement.closest('td').querySelector('.initial-tax-rate');
        const initialValue = initialValueInput ? parseFloat(initialValueInput.value) : 0;
        
        // Clear existing options
        selectElement.innerHTML = '<option value="0">None (0%)</option>';
        
        // Add tax rates from database
        taxRates.forEach(taxRate => {
            const option = document.createElement('option');
            option.value = taxRate.rate;
            option.textContent = `${taxRate.name} (${taxRate.rate.toFixed(2)}%)`;
            option.setAttribute('data-tax-id', taxRate.id);
            selectElement.appendChild(option);
        });
        
        // Set the initial value
        const matchingOption = Array.from(selectElement.options).find(opt => 
            parseFloat(opt.value) === initialValue
        );
        if (matchingOption) {
            matchingOption.selected = true;
        } else {
            selectElement.value = '0';
        }
    }

    // Create tax rate dropdown HTML for new rows
    function createTaxRateDropdownHTML(itemIndex, selectedRate = 0) {
        let optionsHTML = '<option value="0">None (0%)</option>';
        
        taxRates.forEach(taxRate => {
            const selected = parseFloat(taxRate.rate) === parseFloat(selectedRate) ? 'selected' : '';
            optionsHTML += `<option value="${taxRate.rate}" data-tax-id="${taxRate.id}" ${selected}>${taxRate.name} (${taxRate.rate.toFixed(2)}%)</option>`;
        });
        
        return `<select class="form-select item-tax-rate tax-rate-select" name="item_tax_rate_${itemIndex}" onchange="calculateItemTotal(this)">${optionsHTML}</select>`;
    }

    // Initialize itemCounter based on the number of existing items or 1 if none
    let itemCounter = parseInt('{{ quote.items|length if quote.items else 1 }}', 10) || 1;

    /**
     * Adds a new row to the items table, cloning the structure of the first row
     * and resetting its input values for a new item.
     */
    function addNewRow() {
        const tbody = document.querySelector('#items_table tbody');
        const newRow = document.createElement('tr'); // Create new row from scratch for consistency

        newRow.innerHTML = `
            <td>
                <input type="hidden" name="item_id_${itemCounter}" value="">
                <input type="text" class="form-control item-name" name="item_name_${itemCounter}" placeholder="Item name" onchange="calculateItemTotal(this)">
                <textarea class="form-control mt-2 item-description" name="item_description_${itemCounter}" rows="2" placeholder="Description"></textarea>
            </td>
            <td>
                <input type="number" class="form-control item-quantity" name="item_quantity_${itemCounter}" min="1" value="1" onchange="calculateItemTotal(this)">
                <select class="form-select mt-2 item-unit" name="item_unit_${itemCounter}">
                    <option value="none">None</option>
                    <option value="piece">Piece</option>
                    <option value="hour">Hour</option>
                    <option value="day">Day</option>
                    <option value="month">Month</option>
                </select>
            </td>
            <td>
                <input type="number" class="form-control item-price" name="item_price_${itemCounter}" min="0" step="0.01" placeholder="0.00" value="0.00" onchange="calculateItemTotal(this)">
            </td>
            <td>
                <input type="number" class="form-control item-discount" name="item_discount_${itemCounter}" min="0" step="0.01" placeholder="0.00" value="0.00" onchange="calculateItemTotal(this)">
            </td>
            <td>
                ${createTaxRateDropdownHTML(itemCounter)}
                <input type="hidden" class="initial-tax-rate" value="0">
            </td>
            <td>
                <input type="number" class="form-control item-total" name="item_total_${itemCounter}" value="0.00" readonly>
            </td>
            <td>
                <button type="button" class="btn btn-sm btn-danger remove-row-btn" onclick="removeRow(this)">
                    <i class="bi bi-trash"></i>
                </button>
            </td>
        `;
        tbody.appendChild(newRow);
        // Populate tax rate select for the new row (redundant if using createTaxRateDropdownHTML but good for clarity)
        const newTaxSelect = newRow.querySelector('.item-tax-rate');
        populateTaxRateDropdown(newTaxSelect); // Use populateTaxRateDropdown for consistency
        itemCounter++; // Increment the counter
        document.getElementById('items_count').value = itemCounter; // Update hidden input
        calculateTotals(); // Recalculate totals after adding a new row
    }

    function removeRow(button) {
        const row = button.closest('tr');
        row.remove();
        calculateTotals(); // Recalculate totals after removing a row
        // Reindex rows to maintain correct naming if necessary, or handle it server-side
        updateRowIndexes();
    }

    function updateRowIndexes() {
        const rows = document.querySelectorAll('#items_table tbody tr');
        itemCounter = rows.length; // Update itemCounter to the current number of rows
        document.getElementById('items_count').value = itemCounter;

        rows.forEach((row, index) => {
            // Update name attributes for inputs
            row.querySelectorAll('[name^="item_"]').forEach(input => {
                const nameParts = input.name.split('_');
                nameParts[nameParts.length - 1] = index; // Replace the old index with the new one
                input.name = nameParts.join('_');
            });

            // Update initial-tax-rate hidden input name
            const initialTaxRateInput = row.querySelector('.initial-tax-rate');
            if (initialTaxRateInput) {
                initialTaxRateInput.name = `initial_tax_rate_${index}`;
            }

            // Update onclick functions for buttons if they reference the index
            const removeBtn = row.querySelector('.remove-row-btn');
            if (removeBtn) {
                removeBtn.setAttribute('onclick', 'removeRow(this)'); // Simple removal, no index needed here
            }
        });
    }

    function calculateItemTotal(element) {
        const row = element.closest('tr');
        const quantity = parseFloat(row.querySelector('.item-quantity').value) || 0;
        const price = parseFloat(row.querySelector('.item-price').value) || 0;
        const discount = parseFloat(row.querySelector('.item-discount').value) || 0;
        const taxRate = parseFloat(row.querySelector('.item-tax-rate').value) || 0;

        let itemSubtotal = (quantity * price) - discount;
        let itemTaxAmount = itemSubtotal * (taxRate / 100);
        let itemTotal = itemSubtotal + itemTaxAmount;

        row.querySelector('.item-total').value = itemTotal.toFixed(2);
        calculateTotals();
    }

    function calculateTotals() {
        let subtotal = 0;
        let itemTax = 0;
        let invoiceTax = 0; // Not currently used based on the template logic
        let discountAmount = 0;
        let total = 0;

        document.querySelectorAll('#items_table tbody tr').forEach(row => {
            const quantity = parseFloat(row.querySelector('.item-quantity').value) || 0;
            const price = parseFloat(row.querySelector('.item-price').value) || 0;
            const itemDiscount = parseFloat(row.querySelector('.item-discount').value) || 0;
            const taxRate = parseFloat(row.querySelector('.item-tax-rate').value) || 0;

            let itemSubtotal = (quantity * price) - itemDiscount;
            subtotal += itemSubtotal;
            itemTax += itemSubtotal * (taxRate / 100);
        });

        const discountPercentage = parseFloat(document.getElementById('discount_percentage').value) || 0;
        const manualDiscountAmount = parseFloat(document.getElementById('discount_amount_input').value) || 0;

        if (discountPercentage > 0) {
            discountAmount = subtotal * (discountPercentage / 100);
            document.getElementById('discount_amount_input').value = discountAmount.toFixed(2); // Update manual input with calculated
        } else {
            discountAmount = manualDiscountAmount;
        }
        
        total = subtotal + itemTax - discountAmount + invoiceTax; // invoiceTax is 0 based on current logic

        document.getElementById('subtotal').textContent = `$${subtotal.toFixed(2)}`;
        document.getElementById('item_tax').textContent = `$${itemTax.toFixed(2)}`;
        document.getElementById('invoice_tax').textContent = `$${invoiceTax.toFixed(2)}`;
        document.getElementById('discount_amount').textContent = `$${discountAmount.toFixed(2)}`;
        document.getElementById('total').textContent = `$${total.toFixed(2)}`;

        // Calculate balance (assuming 'paid' is a value from the backend, not dynamically input here)
        const paidAmount = parseFloat('{{ quote.paid if quote.paid is not none else 0 }}') || 0;
        const balance = total - paidAmount;
        document.getElementById('paid').textContent = `$${paidAmount.toFixed(2)}`;
        document.getElementById('balance').textContent = `$${balance.toFixed(2)}`;
    }

    document.addEventListener('DOMContentLoaded', function() {
        const clientIdSelect = document.getElementById('client_id');
        const clientDetailsDiv = document.getElementById('client_details');
        const clientNameDiv = document.getElementById('client_name');
        const clientAddressDiv = document.getElementById('client_address');
        const clientEmailDiv = document.getElementById('client_email');

        // Function to update client details in the UI
        function updateClientDetails() {
            const selectedOption = clientIdSelect.options[clientIdSelect.selectedIndex];
            if (selectedOption && selectedOption.value) {
                clientNameDiv.textContent = selectedOption.dataset.name;
                clientAddressDiv.textContent = selectedOption.dataset.address;
                clientEmailDiv.textContent = selectedOption.dataset.email;
                clientDetailsDiv.style.display = 'block';
            } else {
                clientNameDiv.textContent = '';
                clientAddressDiv.textContent = '';
                clientEmailDiv.textContent = '';
                clientDetailsDiv.style.display = 'none';
            }
        }

        // Call on load to set initial client details if a client is pre-selected
        updateClientDetails();
        // Listen for changes in the client dropdown
        clientIdSelect.addEventListener('change', updateClientDetails);

        // Set default invoice date if not already set (e.g., for a brand new invoice)
        if (!document.getElementById('invoice_date').value) {
            document.getElementById('invoice_date').valueAsDate = new Date();
        }

        // Set default due date if not already set
        if (!document.getElementById('due_date').value) {
            const dueDate = new Date();
            dueDate.setDate(dueDate.getDate() + 30); // Default to 30 days from today
            document.getElementById('due_date').valueAsDate = dueDate;
        }

        // Load tax rates first, then populate all selects and perform initial calculation
        loadTaxRates().then(() => {
            calculateTotals();
        });
    });

</script>
{% endblock %}